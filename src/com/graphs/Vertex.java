package com.graphs;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Vertex {
	private String label;
	private Map<Vertex, Integer> neighbours = new HashMap<Vertex, Integer>();
	private String source;
	
	public Vertex(String string) {
		source = string;
		try {
			setLabel();
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}

	public void printVertexInformation() {
		System.out.println("Label : " + label);
		for (Map.Entry<Vertex, Integer> neighbour : neighbours.entrySet())
			System.out.println("Neighbour : " + neighbour.getKey().label + " Distance : " + neighbour.getValue());
	}
	
	public String getLabel() {
		return label;
	}
	
	private void setLabel() throws JSONException{
		JSONObject vertex = new JSONObject(source);
		label = vertex.getString("label");
	}
	
	public void setNeighbours(List<Vertex> allTheVertices) {
		JSONObject vertex;
		try {
			vertex = new JSONObject(source);
			JSONArray arrayOfNeighbours = vertex.getJSONArray("neighbours");
			
			for (int i = 0; i < arrayOfNeighbours.length(); i++) {
				JSONObject neighbour = arrayOfNeighbours.getJSONObject(i);
				
				String neighboursLabel = neighbour.getString("label");
				int neighboursDistance = neighbour.getInt("distance");
				
				for (Vertex v : allTheVertices) {
					if (v.label.equals(neighboursLabel)) {
						neighbours.put(v, neighboursDistance);
						break;
					}
				}
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}

	}

	/*
	 * 	These overridden functions are automatically generated by Eclipse.
	 * 	I do this because I want the vertex to be distinguished by its label only 
	 */
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((label == null) ? 0 : label.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Vertex other = (Vertex) obj;
		if (label == null) {
			if (other.label != null)
				return false;
		} else if (!label.equals(other.label))
			return false;
		return true;
	}

	public Map<Vertex, Integer> getNeighbours() {
		return neighbours;
	}
}